import {
  getCapacitor
} from "./chunk-UPH3BB7G.js";

// node_modules/@ionic/core/dist/esm/keyboard-73175e24.js
var ExceptionCode;
(function(ExceptionCode2) {
  ExceptionCode2["Unimplemented"] = "UNIMPLEMENTED";
  ExceptionCode2["Unavailable"] = "UNAVAILABLE";
})(ExceptionCode || (ExceptionCode = {}));
var KeyboardResize;
(function(KeyboardResize2) {
  KeyboardResize2["Body"] = "body";
  KeyboardResize2["Ionic"] = "ionic";
  KeyboardResize2["Native"] = "native";
  KeyboardResize2["None"] = "none";
})(KeyboardResize || (KeyboardResize = {}));
var Keyboard = {
  getEngine() {
    const capacitor = getCapacitor();
    if (capacitor === null || capacitor === void 0 ? void 0 : capacitor.isPluginAvailable("Keyboard")) {
      return capacitor.Plugins.Keyboard;
    }
    return void 0;
  },
  getResizeMode() {
    const engine = this.getEngine();
    if (!(engine === null || engine === void 0 ? void 0 : engine.getResizeMode)) {
      return Promise.resolve(void 0);
    }
    return engine.getResizeMode().catch((e) => {
      if (e.code === ExceptionCode.Unimplemented) {
        return void 0;
      }
      throw e;
    });
  }
};

export {
  KeyboardResize,
  Keyboard
};
/*! Bundled license information:

@ionic/core/dist/esm/keyboard-73175e24.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS9rZXlib2FyZC03MzE3NWUyNC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgZyBhcyBnZXRDYXBhY2l0b3IgfSBmcm9tICcuL2NhcGFjaXRvci01OTM5NWNiZC5qcyc7XG52YXIgRXhjZXB0aW9uQ29kZTtcbihmdW5jdGlvbiAoRXhjZXB0aW9uQ29kZSkge1xuICAvKipcbiAgICogQVBJIGlzIG5vdCBpbXBsZW1lbnRlZC5cbiAgICpcbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSBBUEkgY2FuJ3QgYmUgdXNlZCBiZWNhdXNlIGl0IGlzIG5vdCBpbXBsZW1lbnRlZCBmb3JcbiAgICogdGhlIGN1cnJlbnQgcGxhdGZvcm0uXG4gICAqL1xuICBFeGNlcHRpb25Db2RlW1wiVW5pbXBsZW1lbnRlZFwiXSA9IFwiVU5JTVBMRU1FTlRFRFwiO1xuICAvKipcbiAgICogQVBJIGlzIG5vdCBhdmFpbGFibGUuXG4gICAqXG4gICAqIFRoaXMgbWVhbnMgdGhlIEFQSSBjYW4ndCBiZSB1c2VkIHJpZ2h0IG5vdyBiZWNhdXNlOlxuICAgKiAgIC0gaXQgaXMgY3VycmVudGx5IG1pc3NpbmcgYSBwcmVyZXF1aXNpdGUsIHN1Y2ggYXMgbmV0d29yayBjb25uZWN0aXZpdHlcbiAgICogICAtIGl0IHJlcXVpcmVzIGEgcGFydGljdWxhciBwbGF0Zm9ybSBvciBicm93c2VyIHZlcnNpb25cbiAgICovXG4gIEV4Y2VwdGlvbkNvZGVbXCJVbmF2YWlsYWJsZVwiXSA9IFwiVU5BVkFJTEFCTEVcIjtcbn0pKEV4Y2VwdGlvbkNvZGUgfHwgKEV4Y2VwdGlvbkNvZGUgPSB7fSkpO1xudmFyIEtleWJvYXJkUmVzaXplO1xuKGZ1bmN0aW9uIChLZXlib2FyZFJlc2l6ZSkge1xuICAvKipcbiAgICogT25seSB0aGUgYGJvZHlgIEhUTUwgZWxlbWVudCB3aWxsIGJlIHJlc2l6ZWQuXG4gICAqIFJlbGF0aXZlIHVuaXRzIGFyZSBub3QgYWZmZWN0ZWQsIGJlY2F1c2UgdGhlIHZpZXdwb3J0IGRvZXMgbm90IGNoYW5nZS5cbiAgICpcbiAgICogQHNpbmNlIDEuMC4wXG4gICAqL1xuICBLZXlib2FyZFJlc2l6ZVtcIkJvZHlcIl0gPSBcImJvZHlcIjtcbiAgLyoqXG4gICAqIE9ubHkgdGhlIGBpb24tYXBwYCBIVE1MIGVsZW1lbnQgd2lsbCBiZSByZXNpemVkLlxuICAgKiBVc2UgaXQgb25seSBmb3IgSW9uaWMgRnJhbWV3b3JrIGFwcHMuXG4gICAqXG4gICAqIEBzaW5jZSAxLjAuMFxuICAgKi9cbiAgS2V5Ym9hcmRSZXNpemVbXCJJb25pY1wiXSA9IFwiaW9uaWNcIjtcbiAgLyoqXG4gICAqIFRoZSB3aG9sZSBuYXRpdmUgV2ViIFZpZXcgd2lsbCBiZSByZXNpemVkIHdoZW4gdGhlIGtleWJvYXJkIHNob3dzL2hpZGVzLlxuICAgKiBUaGlzIGFmZmVjdHMgdGhlIGB2aGAgcmVsYXRpdmUgdW5pdC5cbiAgICpcbiAgICogQHNpbmNlIDEuMC4wXG4gICAqL1xuICBLZXlib2FyZFJlc2l6ZVtcIk5hdGl2ZVwiXSA9IFwibmF0aXZlXCI7XG4gIC8qKlxuICAgKiBOZWl0aGVyIHRoZSBhcHAgbm9yIHRoZSBXZWIgVmlldyBhcmUgcmVzaXplZC5cbiAgICpcbiAgICogQHNpbmNlIDEuMC4wXG4gICAqL1xuICBLZXlib2FyZFJlc2l6ZVtcIk5vbmVcIl0gPSBcIm5vbmVcIjtcbn0pKEtleWJvYXJkUmVzaXplIHx8IChLZXlib2FyZFJlc2l6ZSA9IHt9KSk7XG5jb25zdCBLZXlib2FyZCA9IHtcbiAgZ2V0RW5naW5lKCkge1xuICAgIGNvbnN0IGNhcGFjaXRvciA9IGdldENhcGFjaXRvcigpO1xuICAgIGlmIChjYXBhY2l0b3IgPT09IG51bGwgfHwgY2FwYWNpdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYXBhY2l0b3IuaXNQbHVnaW5BdmFpbGFibGUoJ0tleWJvYXJkJykpIHtcbiAgICAgIHJldHVybiBjYXBhY2l0b3IuUGx1Z2lucy5LZXlib2FyZDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSxcbiAgZ2V0UmVzaXplTW9kZSgpIHtcbiAgICBjb25zdCBlbmdpbmUgPSB0aGlzLmdldEVuZ2luZSgpO1xuICAgIGlmICghKGVuZ2luZSA9PT0gbnVsbCB8fCBlbmdpbmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVuZ2luZS5nZXRSZXNpemVNb2RlKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIH1cbiAgICByZXR1cm4gZW5naW5lLmdldFJlc2l6ZU1vZGUoKS5jYXRjaChlID0+IHtcbiAgICAgIGlmIChlLmNvZGUgPT09IEV4Y2VwdGlvbkNvZGUuVW5pbXBsZW1lbnRlZCkge1xuICAgICAgICAvLyBJZiB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIG5vdCBhdmFpbGFibGVcbiAgICAgICAgLy8gd2UgdHJlYXQgaXQgdGhlIHNhbWUgYXMgaWYgdGhlIHBsdWdpbiBpcyBub3QgYXZhaWxhYmxlLlxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbiAgfVxufTtcbmV4cG9ydCB7IEtleWJvYXJkIGFzIEssIEtleWJvYXJkUmVzaXplIGFzIGEgfTsiXSwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsSUFBSTtBQUFBLENBQ0gsU0FBVUEsZ0JBQWU7QUFPeEIsRUFBQUEsZUFBYyxlQUFlLElBQUk7QUFRakMsRUFBQUEsZUFBYyxhQUFhLElBQUk7QUFDakMsR0FBRyxrQkFBa0IsZ0JBQWdCLENBQUMsRUFBRTtBQUN4QyxJQUFJO0FBQUEsQ0FDSCxTQUFVQyxpQkFBZ0I7QUFPekIsRUFBQUEsZ0JBQWUsTUFBTSxJQUFJO0FBT3pCLEVBQUFBLGdCQUFlLE9BQU8sSUFBSTtBQU8xQixFQUFBQSxnQkFBZSxRQUFRLElBQUk7QUFNM0IsRUFBQUEsZ0JBQWUsTUFBTSxJQUFJO0FBQzNCLEdBQUcsbUJBQW1CLGlCQUFpQixDQUFDLEVBQUU7QUFDMUMsSUFBTSxXQUFXO0FBQUEsRUFDZixZQUFZO0FBQ1YsVUFBTSxZQUFZLGFBQWE7QUFDL0IsUUFBSSxjQUFjLFFBQVEsY0FBYyxTQUFTLFNBQVMsVUFBVSxrQkFBa0IsVUFBVSxHQUFHO0FBQ2pHLGFBQU8sVUFBVSxRQUFRO0FBQUEsSUFDM0I7QUFDQSxXQUFPO0FBQUEsRUFDVDtBQUFBLEVBQ0EsZ0JBQWdCO0FBQ2QsVUFBTSxTQUFTLEtBQUssVUFBVTtBQUM5QixRQUFJLEVBQUUsV0FBVyxRQUFRLFdBQVcsU0FBUyxTQUFTLE9BQU8sZ0JBQWdCO0FBQzNFLGFBQU8sUUFBUSxRQUFRLE1BQVM7QUFBQSxJQUNsQztBQUNBLFdBQU8sT0FBTyxjQUFjLEVBQUUsTUFBTSxPQUFLO0FBQ3ZDLFVBQUksRUFBRSxTQUFTLGNBQWMsZUFBZTtBQUcxQyxlQUFPO0FBQUEsTUFDVDtBQUNBLFlBQU07QUFBQSxJQUNSLENBQUM7QUFBQSxFQUNIO0FBQ0Y7IiwibmFtZXMiOlsiRXhjZXB0aW9uQ29kZSIsIktleWJvYXJkUmVzaXplIl0sInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswXX0=
