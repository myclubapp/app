import {
  AuthService,
  Firestore,
  Timestamp,
  addDoc,
  collection2 as collection,
  collectionData,
  deleteDoc2 as deleteDoc,
  doc2 as doc,
  docData,
  limit,
  orderBy,
  query2 as query,
  setDoc2 as setDoc,
  updateDoc2 as updateDoc,
  where2 as where
} from "./chunk-AMO7VPPH.js";
import {
  inject,
  ɵɵdefineInjectable,
  ɵɵinject
} from "./chunk-PZUQX53K.js";
import {
  __async
} from "./chunk-LQ2EECYJ.js";

// src/app/services/firebase/event.service.ts
var _EventService = class _EventService {
  constructor(firestore = inject(Firestore), authService) {
    this.firestore = firestore;
    this.authService = authService;
  }
  /* CLUB EventS */
  changeClubEvent(eventData, clubId, eventId) {
    const clubEventRef = doc(this.firestore, `club/${clubId}/events/${eventId}`);
    return updateDoc(clubEventRef, eventData);
  }
  getClubEventRef(clubId, eventId) {
    const eventRef = doc(this.firestore, `club/${clubId}/events/${eventId}`);
    return docData(eventRef, { idField: "id" });
  }
  getClubEventsRef(clubId) {
    const eventsRefList = collection(this.firestore, `club/${clubId}/events`);
    const q = query(eventsRefList, where(
      "date",
      ">=",
      Timestamp.fromDate(new Date(Date.now() - 1e3 * 3600 * 2))
      // 2h lang anzeigen lassen
    ));
    return collectionData(q, {
      idField: "id"
    });
  }
  getClubEventsPastRef(clubId) {
    const eventsRefList = collection(this.firestore, `club/${clubId}/events`);
    const q = query(eventsRefList, where(
      "date",
      "<",
      Timestamp.fromDate(new Date(Date.now()))
      // sofort als vergangen auflisten
    ), limit(20));
    return collectionData(q, {
      idField: "id"
    });
  }
  getClubEventAttendeesRef(clubId, eventId) {
    const attendeesRefList = collection(this.firestore, `club/${clubId}/events/${eventId}/attendees`);
    return collectionData(attendeesRefList, {
      idField: "id"
    });
  }
  setClubEventAttendeeStatus(status, clubId, eventId) {
    return __async(this, null, function* () {
      const user = this.authService.auth.currentUser;
      const statusRef = doc(this.firestore, `club/${clubId}/events/${eventId}/attendees/${user.uid}`);
      return yield setDoc(statusRef, { status });
    });
  }
  setClubEventAttendeeStatusAdmin(status, clubId, eventId, memberId) {
    return __async(this, null, function* () {
      const statusRef = doc(this.firestore, `club/${clubId}/events/${eventId}/attendees/${memberId}`);
      return yield setDoc(statusRef, { status });
    });
  }
  setCreateClubEvent(event) {
    return __async(this, null, function* () {
      const user = this.authService.auth.currentUser;
      return addDoc(collection(this.firestore, `userProfile/${user.uid}/clubEvents`), event);
    });
  }
  /* HELFER EVENTS */
  changeHelferEvent(eventData, clubId, eventId) {
    const helferEventRef = doc(this.firestore, `club/${clubId}/helferEvents/${eventId}`);
    return updateDoc(helferEventRef, eventData);
  }
  getClubHelferEventRef(clubId, eventId) {
    const eventRef = doc(this.firestore, `club/${clubId}/helferEvents/${eventId}`);
    return docData(eventRef, { idField: "id" });
  }
  getClubHelferEventRefsByDate(clubId, dateFrom, dateTo) {
    console.log(dateFrom);
    console.log(dateTo);
    const eventsRefList = collection(this.firestore, `club/${clubId}/helferEvents`);
    const q = query(eventsRefList, where("date", ">=", dateFrom), where("date", "<=", dateTo), orderBy("date", "desc"));
    return collectionData(q, {
      idField: "id"
    });
  }
  getClubHelferEventRefs(clubId) {
    const eventsRefList = collection(this.firestore, `club/${clubId}/helferEvents`);
    const q = query(eventsRefList, where(
      "date",
      // muss auf Event End Date umgestellt werden.
      ">=",
      Timestamp.fromDate(new Date(Date.now() - 1e3 * 3600 * 2))
      // 2h lang noch anzeigen
    ));
    return collectionData(q, {
      idField: "id"
    });
  }
  getClubHelferEventPastRefs(clubId) {
    const eventsRefList = collection(this.firestore, `club/${clubId}/helferEvents`);
    const q = query(eventsRefList, where(
      "date",
      "<",
      Timestamp.fromDate(new Date(Date.now()))
      // sofort anzeigen
    ), limit(20));
    return collectionData(q, {
      idField: "id"
    });
  }
  getClubHelferEventAttendeesRef(clubId, eventId) {
    const attendeesRefList = collection(this.firestore, `club/${clubId}/helferEvents/${eventId}/attendees`);
    return collectionData(attendeesRefList, {
      idField: "id"
    });
  }
  getClubHelferEventSchichtenRef(clubId, eventId) {
    const schichtenRefList = collection(this.firestore, `club/${clubId}/helferEvents/${eventId}/schichten`);
    return collectionData(schichtenRefList, {
      idField: "id"
    });
  }
  addNewHelferEventSchicht(clubId, eventId, schicht) {
    console.log(clubId, eventId, schicht);
    return addDoc(collection(this.firestore, `club/${clubId}/helferEvents/${eventId}/schichten`), schicht);
  }
  changeHelferEventSchicht(clubId, eventId, schichtId, schicht) {
    console.log(clubId, eventId, schichtId, schicht);
    const helferEventSchichtRef = doc(this.firestore, `club/${clubId}/helferEvents/${eventId}/schichten/${schichtId}`);
    return updateDoc(helferEventSchichtRef, schicht, { merge: true });
  }
  deleteHelferEventSchicht(clubId, eventId, schichtId) {
    return deleteDoc(doc(this.firestore, `club/${clubId}/helferEvents/${eventId}/schichten/${schichtId}`));
  }
  getClubHelferEventSchichtAttendeesRef(clubId, eventId, schichtId) {
    const schichtAttendeesListRef = collection(this.firestore, `club/${clubId}/helferEvents/${eventId}/schichten/${schichtId}/attendees`);
    return collectionData(schichtAttendeesListRef, {
      idField: "id"
    });
  }
  setClubHelferEventSchichtAttendeeStatus(status, clubId, eventId, schichtId) {
    const user = this.authService.auth.currentUser;
    const statusRef = doc(this.firestore, `club/${clubId}/helferEvents/${eventId}/schichten/${schichtId}/attendees/${user.uid}`);
    return setDoc(statusRef, { status }, {
      merge: true
    });
  }
  setClubHelferEventSchichtAttendeeStatusAdmin(status, clubId, eventId, schichtId, memberId) {
    const statusRef = doc(this.firestore, `club/${clubId}/helferEvents/${eventId}/schichten/${schichtId}/attendees/${memberId}`);
    return setDoc(statusRef, { status }, {
      merge: true
    });
  }
  setClubHelferEventSchichtAttendeeStatusConfirm(clubId, eventId, schichtId, userId, points) {
    const user = this.authService.auth.currentUser;
    const userRef = doc(this.firestore, `userProfile/${user.uid}`);
    const statusRef = doc(this.firestore, `club/${clubId}/helferEvents/${eventId}/schichten/${schichtId}/attendees/${userId}`);
    return setDoc(statusRef, { confirmed: true, date: /* @__PURE__ */ new Date(), confirmedBy: userRef, points }, { merge: true });
  }
  setClubHelferEventAttendeeStatus(status, clubId, eventId) {
    const user = this.authService.auth.currentUser;
    const statusRef = doc(this.firestore, `club/${clubId}/helferEvents/${eventId}/attendees/${user.uid}`);
    return setDoc(statusRef, { status });
  }
  setCreateHelferEvent(event) {
    return __async(this, null, function* () {
      const user = this.authService.auth.currentUser;
      return addDoc(collection(this.firestore, `userProfile/${user.uid}/helferEvents`), event);
    });
  }
  deleteClubEvent(clubId, eventId) {
    const eventRef = doc(this.firestore, `club/${clubId}/events/${eventId}`);
    return deleteDoc(eventRef);
  }
  deleteHelferEvent(clubId, eventId) {
    const eventRef = doc(this.firestore, `club/${clubId}/helferEvents/${eventId}`);
    return deleteDoc(eventRef);
  }
};
_EventService.\u0275fac = function EventService_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _EventService)(\u0275\u0275inject(Firestore), \u0275\u0275inject(AuthService));
};
_EventService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _EventService, factory: _EventService.\u0275fac, providedIn: "root" });
var EventService = _EventService;

export {
  EventService
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
