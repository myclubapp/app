import {
  createColorClasses,
  hostContext
} from "./chunk-QQMTNXUN.js";
import {
  inheritAriaAttributes,
  renderHiddenInput
} from "./chunk-RRWPYKYY.js";
import {
  getIonMode
} from "./chunk-5IJ3YEPD.js";
import {
  Host,
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-T7BCX42A.js";
import {
  __async
} from "./chunk-LQ2EECYJ.js";

// node_modules/@ionic/core/dist/esm/ion-checkbox.entry.js
var checkboxIosCss = ":host{--checkbox-background-checked:var(--ion-color-primary, #0054e9);--border-color-checked:var(--ion-color-primary, #0054e9);--checkmark-color:var(--ion-color-primary-contrast, #fff);--transition:none;display:inline-block;position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.in-item){-ms-flex:1 1 0px;flex:1 1 0;width:100%;height:100%}:host([slot=start]),:host([slot=end]){-ms-flex:initial;flex:initial;width:auto}:host(.ion-color){--checkbox-background-checked:var(--ion-color-base);--border-color-checked:var(--ion-color-base);--checkmark-color:var(--ion-color-contrast)}.checkbox-wrapper{display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between;height:inherit;cursor:inherit}.label-text-wrapper{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host(.in-item) .label-text-wrapper,:host(.in-item:not(.checkbox-label-placement-stacked):not([slot])) .native-wrapper{margin-top:10px;margin-bottom:10px}:host(.in-item.checkbox-label-placement-stacked) .label-text-wrapper{margin-top:10px;margin-bottom:16px}:host(.in-item.checkbox-label-placement-stacked) .native-wrapper{margin-bottom:10px}.label-text-wrapper-hidden{display:none}input{display:none}.native-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.checkbox-icon{border-radius:var(--border-radius);position:relative;width:var(--size);height:var(--size);-webkit-transition:var(--transition);transition:var(--transition);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--checkbox-background);-webkit-box-sizing:border-box;box-sizing:border-box}.checkbox-icon path{fill:none;stroke:var(--checkmark-color);stroke-width:var(--checkmark-width);opacity:0}.checkbox-bottom{padding-top:4px;display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;font-size:0.75rem;white-space:normal}:host(.checkbox-label-placement-stacked) .checkbox-bottom{font-size:1rem}.checkbox-bottom .error-text{display:none;color:var(--ion-color-danger, #c5000f)}.checkbox-bottom .helper-text{display:block;color:var(--ion-color-step-700, var(--ion-text-color-step-300, #4d4d4d))}:host(.ion-touched.ion-invalid) .checkbox-bottom .error-text{display:block}:host(.ion-touched.ion-invalid) .checkbox-bottom .helper-text{display:none}:host(.checkbox-label-placement-start) .checkbox-wrapper{-ms-flex-direction:row;flex-direction:row}:host(.checkbox-label-placement-start) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px}:host(.checkbox-label-placement-end) .checkbox-wrapper{-ms-flex-direction:row-reverse;flex-direction:row-reverse;-ms-flex-pack:start;justify-content:start}:host(.checkbox-label-placement-end) .label-text-wrapper{-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:0;margin-inline-end:0}:host(.checkbox-label-placement-fixed) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px}:host(.checkbox-label-placement-fixed) .label-text-wrapper{-ms-flex:0 0 100px;flex:0 0 100px;width:100px;min-width:100px;max-width:200px}:host(.checkbox-label-placement-stacked) .checkbox-wrapper{-ms-flex-direction:column;flex-direction:column;text-align:center}:host(.checkbox-label-placement-stacked) .label-text-wrapper{-webkit-transform:scale(0.75);transform:scale(0.75);margin-left:0;margin-right:0;margin-bottom:16px;max-width:calc(100% / 0.75)}:host(.checkbox-label-placement-stacked.checkbox-alignment-start) .label-text-wrapper{-webkit-transform-origin:left top;transform-origin:left top}:host-context([dir=rtl]):host(.checkbox-label-placement-stacked.checkbox-alignment-start) .label-text-wrapper,:host-context([dir=rtl]).checkbox-label-placement-stacked.checkbox-alignment-start .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}@supports selector(:dir(rtl)){:host(.checkbox-label-placement-stacked.checkbox-alignment-start:dir(rtl)) .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}}:host(.checkbox-label-placement-stacked.checkbox-alignment-center) .label-text-wrapper{-webkit-transform-origin:center top;transform-origin:center top}:host-context([dir=rtl]):host(.checkbox-label-placement-stacked.checkbox-alignment-center) .label-text-wrapper,:host-context([dir=rtl]).checkbox-label-placement-stacked.checkbox-alignment-center .label-text-wrapper{-webkit-transform-origin:calc(100% - center) top;transform-origin:calc(100% - center) top}@supports selector(:dir(rtl)){:host(.checkbox-label-placement-stacked.checkbox-alignment-center:dir(rtl)) .label-text-wrapper{-webkit-transform-origin:calc(100% - center) top;transform-origin:calc(100% - center) top}}:host(.checkbox-justify-space-between) .checkbox-wrapper{-ms-flex-pack:justify;justify-content:space-between}:host(.checkbox-justify-start) .checkbox-wrapper{-ms-flex-pack:start;justify-content:start}:host(.checkbox-justify-end) .checkbox-wrapper{-ms-flex-pack:end;justify-content:end}:host(.checkbox-alignment-start) .checkbox-wrapper{-ms-flex-align:start;align-items:start}:host(.checkbox-alignment-center) .checkbox-wrapper{-ms-flex-align:center;align-items:center}:host(.checkbox-justify-space-between),:host(.checkbox-justify-start),:host(.checkbox-justify-end),:host(.checkbox-alignment-start),:host(.checkbox-alignment-center){display:block}:host(.checkbox-checked) .checkbox-icon,:host(.checkbox-indeterminate) .checkbox-icon{border-color:var(--border-color-checked);background:var(--checkbox-background-checked)}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{opacity:1}:host(.checkbox-disabled){pointer-events:none}:host{--border-radius:50%;--border-width:0.125rem;--border-style:solid;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.23);--checkbox-background:var(--ion-item-background, var(--ion-background-color, #fff));--size:min(1.375rem, 55.836px);--checkmark-width:1.5px}:host(.checkbox-disabled){opacity:0.3}";
var IonCheckboxIosStyle0 = checkboxIosCss;
var checkboxMdCss = ":host{--checkbox-background-checked:var(--ion-color-primary, #0054e9);--border-color-checked:var(--ion-color-primary, #0054e9);--checkmark-color:var(--ion-color-primary-contrast, #fff);--transition:none;display:inline-block;position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.in-item){-ms-flex:1 1 0px;flex:1 1 0;width:100%;height:100%}:host([slot=start]),:host([slot=end]){-ms-flex:initial;flex:initial;width:auto}:host(.ion-color){--checkbox-background-checked:var(--ion-color-base);--border-color-checked:var(--ion-color-base);--checkmark-color:var(--ion-color-contrast)}.checkbox-wrapper{display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between;height:inherit;cursor:inherit}.label-text-wrapper{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host(.in-item) .label-text-wrapper,:host(.in-item:not(.checkbox-label-placement-stacked):not([slot])) .native-wrapper{margin-top:10px;margin-bottom:10px}:host(.in-item.checkbox-label-placement-stacked) .label-text-wrapper{margin-top:10px;margin-bottom:16px}:host(.in-item.checkbox-label-placement-stacked) .native-wrapper{margin-bottom:10px}.label-text-wrapper-hidden{display:none}input{display:none}.native-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.checkbox-icon{border-radius:var(--border-radius);position:relative;width:var(--size);height:var(--size);-webkit-transition:var(--transition);transition:var(--transition);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--checkbox-background);-webkit-box-sizing:border-box;box-sizing:border-box}.checkbox-icon path{fill:none;stroke:var(--checkmark-color);stroke-width:var(--checkmark-width);opacity:0}.checkbox-bottom{padding-top:4px;display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;font-size:0.75rem;white-space:normal}:host(.checkbox-label-placement-stacked) .checkbox-bottom{font-size:1rem}.checkbox-bottom .error-text{display:none;color:var(--ion-color-danger, #c5000f)}.checkbox-bottom .helper-text{display:block;color:var(--ion-color-step-700, var(--ion-text-color-step-300, #4d4d4d))}:host(.ion-touched.ion-invalid) .checkbox-bottom .error-text{display:block}:host(.ion-touched.ion-invalid) .checkbox-bottom .helper-text{display:none}:host(.checkbox-label-placement-start) .checkbox-wrapper{-ms-flex-direction:row;flex-direction:row}:host(.checkbox-label-placement-start) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px}:host(.checkbox-label-placement-end) .checkbox-wrapper{-ms-flex-direction:row-reverse;flex-direction:row-reverse;-ms-flex-pack:start;justify-content:start}:host(.checkbox-label-placement-end) .label-text-wrapper{-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:0;margin-inline-end:0}:host(.checkbox-label-placement-fixed) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px}:host(.checkbox-label-placement-fixed) .label-text-wrapper{-ms-flex:0 0 100px;flex:0 0 100px;width:100px;min-width:100px;max-width:200px}:host(.checkbox-label-placement-stacked) .checkbox-wrapper{-ms-flex-direction:column;flex-direction:column;text-align:center}:host(.checkbox-label-placement-stacked) .label-text-wrapper{-webkit-transform:scale(0.75);transform:scale(0.75);margin-left:0;margin-right:0;margin-bottom:16px;max-width:calc(100% / 0.75)}:host(.checkbox-label-placement-stacked.checkbox-alignment-start) .label-text-wrapper{-webkit-transform-origin:left top;transform-origin:left top}:host-context([dir=rtl]):host(.checkbox-label-placement-stacked.checkbox-alignment-start) .label-text-wrapper,:host-context([dir=rtl]).checkbox-label-placement-stacked.checkbox-alignment-start .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}@supports selector(:dir(rtl)){:host(.checkbox-label-placement-stacked.checkbox-alignment-start:dir(rtl)) .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}}:host(.checkbox-label-placement-stacked.checkbox-alignment-center) .label-text-wrapper{-webkit-transform-origin:center top;transform-origin:center top}:host-context([dir=rtl]):host(.checkbox-label-placement-stacked.checkbox-alignment-center) .label-text-wrapper,:host-context([dir=rtl]).checkbox-label-placement-stacked.checkbox-alignment-center .label-text-wrapper{-webkit-transform-origin:calc(100% - center) top;transform-origin:calc(100% - center) top}@supports selector(:dir(rtl)){:host(.checkbox-label-placement-stacked.checkbox-alignment-center:dir(rtl)) .label-text-wrapper{-webkit-transform-origin:calc(100% - center) top;transform-origin:calc(100% - center) top}}:host(.checkbox-justify-space-between) .checkbox-wrapper{-ms-flex-pack:justify;justify-content:space-between}:host(.checkbox-justify-start) .checkbox-wrapper{-ms-flex-pack:start;justify-content:start}:host(.checkbox-justify-end) .checkbox-wrapper{-ms-flex-pack:end;justify-content:end}:host(.checkbox-alignment-start) .checkbox-wrapper{-ms-flex-align:start;align-items:start}:host(.checkbox-alignment-center) .checkbox-wrapper{-ms-flex-align:center;align-items:center}:host(.checkbox-justify-space-between),:host(.checkbox-justify-start),:host(.checkbox-justify-end),:host(.checkbox-alignment-start),:host(.checkbox-alignment-center){display:block}:host(.checkbox-checked) .checkbox-icon,:host(.checkbox-indeterminate) .checkbox-icon{border-color:var(--border-color-checked);background:var(--checkbox-background-checked)}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{opacity:1}:host(.checkbox-disabled){pointer-events:none}:host{--border-radius:calc(var(--size) * .125);--border-width:2px;--border-style:solid;--border-color:rgb(var(--ion-text-color-rgb, 0, 0, 0), 0.6);--checkmark-width:3;--checkbox-background:var(--ion-item-background, var(--ion-background-color, #fff));--transition:background 180ms cubic-bezier(0.4, 0, 0.2, 1);--size:18px}.checkbox-icon path{stroke-dasharray:30;stroke-dashoffset:30}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{stroke-dashoffset:0;-webkit-transition:stroke-dashoffset 90ms linear 90ms;transition:stroke-dashoffset 90ms linear 90ms}:host(.checkbox-disabled) .label-text-wrapper{opacity:0.38}:host(.checkbox-disabled) .native-wrapper{opacity:0.63}";
var IonCheckboxMdStyle0 = checkboxMdCss;
var Checkbox = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ionChange = createEvent(this, "ionChange", 7);
    this.ionFocus = createEvent(this, "ionFocus", 7);
    this.ionBlur = createEvent(this, "ionBlur", 7);
    this.inputId = `ion-cb-${checkboxIds++}`;
    this.inputLabelId = `${this.inputId}-lbl`;
    this.helperTextId = `${this.inputId}-helper-text`;
    this.errorTextId = `${this.inputId}-error-text`;
    this.inheritedAttributes = {};
    this.setChecked = (state) => {
      const isChecked = this.checked = state;
      this.ionChange.emit({
        checked: isChecked,
        value: this.value
      });
    };
    this.toggleChecked = (ev) => {
      ev.preventDefault();
      this.setFocus();
      this.setChecked(!this.checked);
      this.indeterminate = false;
    };
    this.onFocus = () => {
      this.ionFocus.emit();
    };
    this.onBlur = () => {
      this.ionBlur.emit();
    };
    this.onKeyDown = (ev) => {
      if (ev.key === " ") {
        ev.preventDefault();
        if (!this.disabled) {
          this.toggleChecked(ev);
        }
      }
    };
    this.onClick = (ev) => {
      if (this.disabled) {
        return;
      }
      this.toggleChecked(ev);
    };
    this.color = void 0;
    this.name = this.inputId;
    this.checked = false;
    this.indeterminate = false;
    this.disabled = false;
    this.errorText = void 0;
    this.helperText = void 0;
    this.value = "on";
    this.labelPlacement = "start";
    this.justify = void 0;
    this.alignment = void 0;
    this.required = false;
  }
  componentWillLoad() {
    this.inheritedAttributes = Object.assign({}, inheritAriaAttributes(this.el));
  }
  /** @internal */
  setFocus() {
    return __async(this, null, function* () {
      if (this.focusEl) {
        this.focusEl.focus();
      }
    });
  }
  getHintTextID() {
    const {
      el,
      helperText,
      errorText,
      helperTextId,
      errorTextId
    } = this;
    if (el.classList.contains("ion-touched") && el.classList.contains("ion-invalid") && errorText) {
      return errorTextId;
    }
    if (helperText) {
      return helperTextId;
    }
    return void 0;
  }
  /**
   * Responsible for rendering helper text and error text.
   * This element should only be rendered if hint text is set.
   */
  renderHintText() {
    const {
      helperText,
      errorText,
      helperTextId,
      errorTextId
    } = this;
    const hasHintText = !!helperText || !!errorText;
    if (!hasHintText) {
      return;
    }
    return h("div", {
      class: "checkbox-bottom"
    }, h("div", {
      id: helperTextId,
      class: "helper-text",
      part: "supporting-text helper-text"
    }, helperText), h("div", {
      id: errorTextId,
      class: "error-text",
      part: "supporting-text error-text"
    }, errorText));
  }
  render() {
    const {
      color,
      checked,
      disabled,
      el,
      getSVGPath,
      indeterminate,
      inheritedAttributes,
      inputId,
      justify,
      labelPlacement,
      name,
      value,
      alignment,
      required
    } = this;
    const mode = getIonMode(this);
    const path = getSVGPath(mode, indeterminate);
    const hasLabelContent = el.textContent !== "";
    renderHiddenInput(true, el, name, checked ? value : "", disabled);
    return h(Host, {
      key: "90bb17a4fae17088524555968a002327400807cf",
      role: "checkbox",
      "aria-checked": indeterminate ? "mixed" : `${checked}`,
      "aria-describedby": this.getHintTextID(),
      "aria-invalid": this.getHintTextID() === this.errorTextId,
      "aria-labelledby": hasLabelContent ? this.inputLabelId : null,
      "aria-label": inheritedAttributes["aria-label"] || null,
      "aria-disabled": disabled ? "true" : null,
      tabindex: disabled ? void 0 : 0,
      onKeyDown: this.onKeyDown,
      class: createColorClasses(color, {
        [mode]: true,
        "in-item": hostContext("ion-item", el),
        "checkbox-checked": checked,
        "checkbox-disabled": disabled,
        "checkbox-indeterminate": indeterminate,
        interactive: true,
        [`checkbox-justify-${justify}`]: justify !== void 0,
        [`checkbox-alignment-${alignment}`]: alignment !== void 0,
        [`checkbox-label-placement-${labelPlacement}`]: true
      }),
      onClick: this.onClick
    }, h("label", {
      key: "58b5762aa358dff81910874631e06620a2ae1561",
      class: "checkbox-wrapper",
      htmlFor: inputId
    }, h("input", Object.assign({
      key: "6abe299d690c345d36d6fd76ab113fdccfbbac52",
      type: "checkbox",
      checked: checked ? true : void 0,
      disabled,
      id: inputId,
      onChange: this.toggleChecked,
      onFocus: () => this.onFocus(),
      onBlur: () => this.onBlur(),
      ref: (focusEl) => this.focusEl = focusEl,
      required
    }, inheritedAttributes)), h("div", {
      key: "2654168e45ccfdbcfe13af8c97e0e21d61ba0150",
      class: {
        "label-text-wrapper": true,
        "label-text-wrapper-hidden": !hasLabelContent
      },
      part: "label",
      id: this.inputLabelId
    }, h("slot", {
      key: "a91f3f67d9ddd6b616e48799aba11cae3564d1ab"
    }), this.renderHintText()), h("div", {
      key: "d5a9170b084d09df6b02f416e744085b5bcf0dde",
      class: "native-wrapper"
    }, h("svg", {
      key: "b1968ce4aa9d652a9f2bdc427ea3a65e6c04df51",
      class: "checkbox-icon",
      viewBox: "0 0 24 24",
      part: "container"
    }, path))));
  }
  getSVGPath(mode, indeterminate) {
    let path = indeterminate ? h("path", {
      d: "M6 12L18 12",
      part: "mark"
    }) : h("path", {
      d: "M5.9,12.5l3.8,3.8l8.8-8.8",
      part: "mark"
    });
    if (mode === "md") {
      path = indeterminate ? h("path", {
        d: "M2 12H22",
        part: "mark"
      }) : h("path", {
        d: "M1.73,12.91 8.1,19.28 22.79,4.59",
        part: "mark"
      });
    }
    return path;
  }
  get el() {
    return getElement(this);
  }
};
var checkboxIds = 0;
Checkbox.style = {
  ios: IonCheckboxIosStyle0,
  md: IonCheckboxMdStyle0
};
export {
  Checkbox as ion_checkbox
};
/*! Bundled license information:

@ionic/core/dist/esm/ion-checkbox.entry.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS9pb24tY2hlY2tib3guZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgYyBhcyBjcmVhdGVFdmVudCwgaCwgZSBhcyBIb3N0LCBmIGFzIGdldEVsZW1lbnQgfSBmcm9tICcuL2luZGV4LTUyN2I5ZTM0LmpzJztcbmltcG9ydCB7IGkgYXMgaW5oZXJpdEFyaWFBdHRyaWJ1dGVzLCBkIGFzIHJlbmRlckhpZGRlbklucHV0IH0gZnJvbSAnLi9oZWxwZXJzLTc4ZWZlZWMzLmpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlQ29sb3JDbGFzc2VzLCBoIGFzIGhvc3RDb250ZXh0IH0gZnJvbSAnLi90aGVtZS0wMWYzZjI5Yy5qcyc7XG5pbXBvcnQgeyBiIGFzIGdldElvbk1vZGUgfSBmcm9tICcuL2lvbmljLWdsb2JhbC1jYTg2Y2YzMi5qcyc7XG5jb25zdCBjaGVja2JveElvc0NzcyA9IFwiOmhvc3R7LS1jaGVja2JveC1iYWNrZ3JvdW5kLWNoZWNrZWQ6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMwMDU0ZTkpOy0tYm9yZGVyLWNvbG9yLWNoZWNrZWQ6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMwMDU0ZTkpOy0tY2hlY2ttYXJrLWNvbG9yOnZhcigtLWlvbi1jb2xvci1wcmltYXJ5LWNvbnRyYXN0LCAjZmZmKTstLXRyYW5zaXRpb246bm9uZTtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7ei1pbmRleDoyfTpob3N0KC5pbi1pdGVtKXstbXMtZmxleDoxIDEgMHB4O2ZsZXg6MSAxIDA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX06aG9zdChbc2xvdD1zdGFydF0pLDpob3N0KFtzbG90PWVuZF0pey1tcy1mbGV4OmluaXRpYWw7ZmxleDppbml0aWFsO3dpZHRoOmF1dG99Omhvc3QoLmlvbi1jb2xvcil7LS1jaGVja2JveC1iYWNrZ3JvdW5kLWNoZWNrZWQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpOy0tYm9yZGVyLWNvbG9yLWNoZWNrZWQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpOy0tY2hlY2ttYXJrLWNvbG9yOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9LmNoZWNrYm94LXdyYXBwZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtoZWlnaHQ6aW5oZXJpdDtjdXJzb3I6aW5oZXJpdH0ubGFiZWwtdGV4dC13cmFwcGVye3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbn06aG9zdCguaW4taXRlbSkgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguaW4taXRlbTpub3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKTpub3QoW3Nsb3RdKSkgLm5hdGl2ZS13cmFwcGVye21hcmdpbi10b3A6MTBweDttYXJnaW4tYm90dG9tOjEwcHh9Omhvc3QoLmluLWl0ZW0uY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7bWFyZ2luLXRvcDoxMHB4O21hcmdpbi1ib3R0b206MTZweH06aG9zdCguaW4taXRlbS5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLm5hdGl2ZS13cmFwcGVye21hcmdpbi1ib3R0b206MTBweH0ubGFiZWwtdGV4dC13cmFwcGVyLWhpZGRlbntkaXNwbGF5Om5vbmV9aW5wdXR7ZGlzcGxheTpub25lfS5uYXRpdmUtd3JhcHBlcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5jaGVja2JveC1pY29ue2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6dmFyKC0tc2l6ZSk7aGVpZ2h0OnZhcigtLXNpemUpOy13ZWJraXQtdHJhbnNpdGlvbjp2YXIoLS10cmFuc2l0aW9uKTt0cmFuc2l0aW9uOnZhcigtLXRyYW5zaXRpb24pO2JvcmRlci13aWR0aDp2YXIoLS1ib3JkZXItd2lkdGgpO2JvcmRlci1zdHlsZTp2YXIoLS1ib3JkZXItc3R5bGUpO2JvcmRlci1jb2xvcjp2YXIoLS1ib3JkZXItY29sb3IpO2JhY2tncm91bmQ6dmFyKC0tY2hlY2tib3gtYmFja2dyb3VuZCk7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fS5jaGVja2JveC1pY29uIHBhdGh7ZmlsbDpub25lO3N0cm9rZTp2YXIoLS1jaGVja21hcmstY29sb3IpO3N0cm9rZS13aWR0aDp2YXIoLS1jaGVja21hcmstd2lkdGgpO29wYWNpdHk6MH0uY2hlY2tib3gtYm90dG9te3BhZGRpbmctdG9wOjRweDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Zm9udC1zaXplOjAuNzVyZW07d2hpdGUtc3BhY2U6bm9ybWFsfTpob3N0KC5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLmNoZWNrYm94LWJvdHRvbXtmb250LXNpemU6MXJlbX0uY2hlY2tib3gtYm90dG9tIC5lcnJvci10ZXh0e2Rpc3BsYXk6bm9uZTtjb2xvcjp2YXIoLS1pb24tY29sb3ItZGFuZ2VyLCAjYzUwMDBmKX0uY2hlY2tib3gtYm90dG9tIC5oZWxwZXItdGV4dHtkaXNwbGF5OmJsb2NrO2NvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTcwMCwgdmFyKC0taW9uLXRleHQtY29sb3Itc3RlcC0zMDAsICM0ZDRkNGQpKX06aG9zdCguaW9uLXRvdWNoZWQuaW9uLWludmFsaWQpIC5jaGVja2JveC1ib3R0b20gLmVycm9yLXRleHR7ZGlzcGxheTpibG9ja306aG9zdCguaW9uLXRvdWNoZWQuaW9uLWludmFsaWQpIC5jaGVja2JveC1ib3R0b20gLmhlbHBlci10ZXh0e2Rpc3BsYXk6bm9uZX06aG9zdCguY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LXN0YXJ0KSAuY2hlY2tib3gtd3JhcHBlcnstbXMtZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtZGlyZWN0aW9uOnJvd306aG9zdCguY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LXN0YXJ0KSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtbWFyZ2luLXN0YXJ0OjA7bWFyZ2luLWlubGluZS1zdGFydDowOy13ZWJraXQtbWFyZ2luLWVuZDoxNnB4O21hcmdpbi1pbmxpbmUtZW5kOjE2cHh9Omhvc3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1lbmQpIC5jaGVja2JveC13cmFwcGVyey1tcy1mbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZTtmbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZTstbXMtZmxleC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpzdGFydH06aG9zdCguY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LWVuZCkgLmxhYmVsLXRleHQtd3JhcHBlcnstd2Via2l0LW1hcmdpbi1zdGFydDoxNnB4O21hcmdpbi1pbmxpbmUtc3RhcnQ6MTZweDstd2Via2l0LW1hcmdpbi1lbmQ6MDttYXJnaW4taW5saW5lLWVuZDowfTpob3N0KC5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtZml4ZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MDttYXJnaW4taW5saW5lLXN0YXJ0OjA7LXdlYmtpdC1tYXJnaW4tZW5kOjE2cHg7bWFyZ2luLWlubGluZS1lbmQ6MTZweH06aG9zdCguY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LWZpeGVkKSAubGFiZWwtdGV4dC13cmFwcGVyey1tcy1mbGV4OjAgMCAxMDBweDtmbGV4OjAgMCAxMDBweDt3aWR0aDoxMDBweDttaW4td2lkdGg6MTAwcHg7bWF4LXdpZHRoOjIwMHB4fTpob3N0KC5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLmNoZWNrYm94LXdyYXBwZXJ7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47dGV4dC1hbGlnbjpjZW50ZXJ9Omhvc3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNzUpO3RyYW5zZm9ybTpzY2FsZSgwLjc1KTttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi1ib3R0b206MTZweDttYXgtd2lkdGg6Y2FsYygxMDAlIC8gMC43NSl9Omhvc3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkLmNoZWNrYm94LWFsaWdubWVudC1zdGFydCkgLmxhYmVsLXRleHQtd3JhcHBlcnstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCB0b3A7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IHRvcH06aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCguY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQuY2hlY2tib3gtYWxpZ25tZW50LXN0YXJ0KSAubGFiZWwtdGV4dC13cmFwcGVyLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZC5jaGVja2JveC1hbGlnbm1lbnQtc3RhcnQgLmxhYmVsLXRleHQtd3JhcHBlcnstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgdG9wO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgdG9wfUBzdXBwb3J0cyBzZWxlY3Rvcig6ZGlyKHJ0bCkpezpob3N0KC5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZC5jaGVja2JveC1hbGlnbm1lbnQtc3RhcnQ6ZGlyKHJ0bCkpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IHRvcDt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IHRvcH19Omhvc3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkLmNoZWNrYm94LWFsaWdubWVudC1jZW50ZXIpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciB0b3A7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgdG9wfTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZC5jaGVja2JveC1hbGlnbm1lbnQtY2VudGVyKSAubGFiZWwtdGV4dC13cmFwcGVyLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZC5jaGVja2JveC1hbGlnbm1lbnQtY2VudGVyIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNhbGMoMTAwJSAtIGNlbnRlcikgdG9wO3RyYW5zZm9ybS1vcmlnaW46Y2FsYygxMDAlIC0gY2VudGVyKSB0b3B9QHN1cHBvcnRzIHNlbGVjdG9yKDpkaXIocnRsKSl7Omhvc3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkLmNoZWNrYm94LWFsaWdubWVudC1jZW50ZXI6ZGlyKHJ0bCkpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNhbGMoMTAwJSAtIGNlbnRlcikgdG9wO3RyYW5zZm9ybS1vcmlnaW46Y2FsYygxMDAlIC0gY2VudGVyKSB0b3B9fTpob3N0KC5jaGVja2JveC1qdXN0aWZ5LXNwYWNlLWJldHdlZW4pIC5jaGVja2JveC13cmFwcGVyey1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn06aG9zdCguY2hlY2tib3gtanVzdGlmeS1zdGFydCkgLmNoZWNrYm94LXdyYXBwZXJ7LW1zLWZsZXgtcGFjazpzdGFydDtqdXN0aWZ5LWNvbnRlbnQ6c3RhcnR9Omhvc3QoLmNoZWNrYm94LWp1c3RpZnktZW5kKSAuY2hlY2tib3gtd3JhcHBlcnstbXMtZmxleC1wYWNrOmVuZDtqdXN0aWZ5LWNvbnRlbnQ6ZW5kfTpob3N0KC5jaGVja2JveC1hbGlnbm1lbnQtc3RhcnQpIC5jaGVja2JveC13cmFwcGVyey1tcy1mbGV4LWFsaWduOnN0YXJ0O2FsaWduLWl0ZW1zOnN0YXJ0fTpob3N0KC5jaGVja2JveC1hbGlnbm1lbnQtY2VudGVyKSAuY2hlY2tib3gtd3JhcHBlcnstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfTpob3N0KC5jaGVja2JveC1qdXN0aWZ5LXNwYWNlLWJldHdlZW4pLDpob3N0KC5jaGVja2JveC1qdXN0aWZ5LXN0YXJ0KSw6aG9zdCguY2hlY2tib3gtanVzdGlmeS1lbmQpLDpob3N0KC5jaGVja2JveC1hbGlnbm1lbnQtc3RhcnQpLDpob3N0KC5jaGVja2JveC1hbGlnbm1lbnQtY2VudGVyKXtkaXNwbGF5OmJsb2NrfTpob3N0KC5jaGVja2JveC1jaGVja2VkKSAuY2hlY2tib3gtaWNvbiw6aG9zdCguY2hlY2tib3gtaW5kZXRlcm1pbmF0ZSkgLmNoZWNrYm94LWljb257Ym9yZGVyLWNvbG9yOnZhcigtLWJvcmRlci1jb2xvci1jaGVja2VkKTtiYWNrZ3JvdW5kOnZhcigtLWNoZWNrYm94LWJhY2tncm91bmQtY2hlY2tlZCl9Omhvc3QoLmNoZWNrYm94LWNoZWNrZWQpIC5jaGVja2JveC1pY29uIHBhdGgsOmhvc3QoLmNoZWNrYm94LWluZGV0ZXJtaW5hdGUpIC5jaGVja2JveC1pY29uIHBhdGh7b3BhY2l0eToxfTpob3N0KC5jaGVja2JveC1kaXNhYmxlZCl7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdHstLWJvcmRlci1yYWRpdXM6NTAlOy0tYm9yZGVyLXdpZHRoOjAuMTI1cmVtOy0tYm9yZGVyLXN0eWxlOnNvbGlkOy0tYm9yZGVyLWNvbG9yOnJnYmEodmFyKC0taW9uLXRleHQtY29sb3ItcmdiLCAwLCAwLCAwKSwgMC4yMyk7LS1jaGVja2JveC1iYWNrZ3JvdW5kOnZhcigtLWlvbi1pdGVtLWJhY2tncm91bmQsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjZmZmKSk7LS1zaXplOm1pbigxLjM3NXJlbSwgNTUuODM2cHgpOy0tY2hlY2ttYXJrLXdpZHRoOjEuNXB4fTpob3N0KC5jaGVja2JveC1kaXNhYmxlZCl7b3BhY2l0eTowLjN9XCI7XG5jb25zdCBJb25DaGVja2JveElvc1N0eWxlMCA9IGNoZWNrYm94SW9zQ3NzO1xuY29uc3QgY2hlY2tib3hNZENzcyA9IFwiOmhvc3R7LS1jaGVja2JveC1iYWNrZ3JvdW5kLWNoZWNrZWQ6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMwMDU0ZTkpOy0tYm9yZGVyLWNvbG9yLWNoZWNrZWQ6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMwMDU0ZTkpOy0tY2hlY2ttYXJrLWNvbG9yOnZhcigtLWlvbi1jb2xvci1wcmltYXJ5LWNvbnRyYXN0LCAjZmZmKTstLXRyYW5zaXRpb246bm9uZTtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7ei1pbmRleDoyfTpob3N0KC5pbi1pdGVtKXstbXMtZmxleDoxIDEgMHB4O2ZsZXg6MSAxIDA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX06aG9zdChbc2xvdD1zdGFydF0pLDpob3N0KFtzbG90PWVuZF0pey1tcy1mbGV4OmluaXRpYWw7ZmxleDppbml0aWFsO3dpZHRoOmF1dG99Omhvc3QoLmlvbi1jb2xvcil7LS1jaGVja2JveC1iYWNrZ3JvdW5kLWNoZWNrZWQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpOy0tYm9yZGVyLWNvbG9yLWNoZWNrZWQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpOy0tY2hlY2ttYXJrLWNvbG9yOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9LmNoZWNrYm94LXdyYXBwZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtoZWlnaHQ6aW5oZXJpdDtjdXJzb3I6aW5oZXJpdH0ubGFiZWwtdGV4dC13cmFwcGVye3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbn06aG9zdCguaW4taXRlbSkgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguaW4taXRlbTpub3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKTpub3QoW3Nsb3RdKSkgLm5hdGl2ZS13cmFwcGVye21hcmdpbi10b3A6MTBweDttYXJnaW4tYm90dG9tOjEwcHh9Omhvc3QoLmluLWl0ZW0uY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7bWFyZ2luLXRvcDoxMHB4O21hcmdpbi1ib3R0b206MTZweH06aG9zdCguaW4taXRlbS5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLm5hdGl2ZS13cmFwcGVye21hcmdpbi1ib3R0b206MTBweH0ubGFiZWwtdGV4dC13cmFwcGVyLWhpZGRlbntkaXNwbGF5Om5vbmV9aW5wdXR7ZGlzcGxheTpub25lfS5uYXRpdmUtd3JhcHBlcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5jaGVja2JveC1pY29ue2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6dmFyKC0tc2l6ZSk7aGVpZ2h0OnZhcigtLXNpemUpOy13ZWJraXQtdHJhbnNpdGlvbjp2YXIoLS10cmFuc2l0aW9uKTt0cmFuc2l0aW9uOnZhcigtLXRyYW5zaXRpb24pO2JvcmRlci13aWR0aDp2YXIoLS1ib3JkZXItd2lkdGgpO2JvcmRlci1zdHlsZTp2YXIoLS1ib3JkZXItc3R5bGUpO2JvcmRlci1jb2xvcjp2YXIoLS1ib3JkZXItY29sb3IpO2JhY2tncm91bmQ6dmFyKC0tY2hlY2tib3gtYmFja2dyb3VuZCk7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fS5jaGVja2JveC1pY29uIHBhdGh7ZmlsbDpub25lO3N0cm9rZTp2YXIoLS1jaGVja21hcmstY29sb3IpO3N0cm9rZS13aWR0aDp2YXIoLS1jaGVja21hcmstd2lkdGgpO29wYWNpdHk6MH0uY2hlY2tib3gtYm90dG9te3BhZGRpbmctdG9wOjRweDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Zm9udC1zaXplOjAuNzVyZW07d2hpdGUtc3BhY2U6bm9ybWFsfTpob3N0KC5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLmNoZWNrYm94LWJvdHRvbXtmb250LXNpemU6MXJlbX0uY2hlY2tib3gtYm90dG9tIC5lcnJvci10ZXh0e2Rpc3BsYXk6bm9uZTtjb2xvcjp2YXIoLS1pb24tY29sb3ItZGFuZ2VyLCAjYzUwMDBmKX0uY2hlY2tib3gtYm90dG9tIC5oZWxwZXItdGV4dHtkaXNwbGF5OmJsb2NrO2NvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTcwMCwgdmFyKC0taW9uLXRleHQtY29sb3Itc3RlcC0zMDAsICM0ZDRkNGQpKX06aG9zdCguaW9uLXRvdWNoZWQuaW9uLWludmFsaWQpIC5jaGVja2JveC1ib3R0b20gLmVycm9yLXRleHR7ZGlzcGxheTpibG9ja306aG9zdCguaW9uLXRvdWNoZWQuaW9uLWludmFsaWQpIC5jaGVja2JveC1ib3R0b20gLmhlbHBlci10ZXh0e2Rpc3BsYXk6bm9uZX06aG9zdCguY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LXN0YXJ0KSAuY2hlY2tib3gtd3JhcHBlcnstbXMtZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtZGlyZWN0aW9uOnJvd306aG9zdCguY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LXN0YXJ0KSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtbWFyZ2luLXN0YXJ0OjA7bWFyZ2luLWlubGluZS1zdGFydDowOy13ZWJraXQtbWFyZ2luLWVuZDoxNnB4O21hcmdpbi1pbmxpbmUtZW5kOjE2cHh9Omhvc3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1lbmQpIC5jaGVja2JveC13cmFwcGVyey1tcy1mbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZTtmbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZTstbXMtZmxleC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpzdGFydH06aG9zdCguY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LWVuZCkgLmxhYmVsLXRleHQtd3JhcHBlcnstd2Via2l0LW1hcmdpbi1zdGFydDoxNnB4O21hcmdpbi1pbmxpbmUtc3RhcnQ6MTZweDstd2Via2l0LW1hcmdpbi1lbmQ6MDttYXJnaW4taW5saW5lLWVuZDowfTpob3N0KC5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtZml4ZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MDttYXJnaW4taW5saW5lLXN0YXJ0OjA7LXdlYmtpdC1tYXJnaW4tZW5kOjE2cHg7bWFyZ2luLWlubGluZS1lbmQ6MTZweH06aG9zdCguY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LWZpeGVkKSAubGFiZWwtdGV4dC13cmFwcGVyey1tcy1mbGV4OjAgMCAxMDBweDtmbGV4OjAgMCAxMDBweDt3aWR0aDoxMDBweDttaW4td2lkdGg6MTAwcHg7bWF4LXdpZHRoOjIwMHB4fTpob3N0KC5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLmNoZWNrYm94LXdyYXBwZXJ7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47dGV4dC1hbGlnbjpjZW50ZXJ9Omhvc3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNzUpO3RyYW5zZm9ybTpzY2FsZSgwLjc1KTttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi1ib3R0b206MTZweDttYXgtd2lkdGg6Y2FsYygxMDAlIC8gMC43NSl9Omhvc3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkLmNoZWNrYm94LWFsaWdubWVudC1zdGFydCkgLmxhYmVsLXRleHQtd3JhcHBlcnstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCB0b3A7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IHRvcH06aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCguY2hlY2tib3gtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQuY2hlY2tib3gtYWxpZ25tZW50LXN0YXJ0KSAubGFiZWwtdGV4dC13cmFwcGVyLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZC5jaGVja2JveC1hbGlnbm1lbnQtc3RhcnQgLmxhYmVsLXRleHQtd3JhcHBlcnstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgdG9wO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgdG9wfUBzdXBwb3J0cyBzZWxlY3Rvcig6ZGlyKHJ0bCkpezpob3N0KC5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZC5jaGVja2JveC1hbGlnbm1lbnQtc3RhcnQ6ZGlyKHJ0bCkpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IHRvcDt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IHRvcH19Omhvc3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkLmNoZWNrYm94LWFsaWdubWVudC1jZW50ZXIpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciB0b3A7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgdG9wfTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZC5jaGVja2JveC1hbGlnbm1lbnQtY2VudGVyKSAubGFiZWwtdGV4dC13cmFwcGVyLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5jaGVja2JveC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZC5jaGVja2JveC1hbGlnbm1lbnQtY2VudGVyIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNhbGMoMTAwJSAtIGNlbnRlcikgdG9wO3RyYW5zZm9ybS1vcmlnaW46Y2FsYygxMDAlIC0gY2VudGVyKSB0b3B9QHN1cHBvcnRzIHNlbGVjdG9yKDpkaXIocnRsKSl7Omhvc3QoLmNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkLmNoZWNrYm94LWFsaWdubWVudC1jZW50ZXI6ZGlyKHJ0bCkpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNhbGMoMTAwJSAtIGNlbnRlcikgdG9wO3RyYW5zZm9ybS1vcmlnaW46Y2FsYygxMDAlIC0gY2VudGVyKSB0b3B9fTpob3N0KC5jaGVja2JveC1qdXN0aWZ5LXNwYWNlLWJldHdlZW4pIC5jaGVja2JveC13cmFwcGVyey1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn06aG9zdCguY2hlY2tib3gtanVzdGlmeS1zdGFydCkgLmNoZWNrYm94LXdyYXBwZXJ7LW1zLWZsZXgtcGFjazpzdGFydDtqdXN0aWZ5LWNvbnRlbnQ6c3RhcnR9Omhvc3QoLmNoZWNrYm94LWp1c3RpZnktZW5kKSAuY2hlY2tib3gtd3JhcHBlcnstbXMtZmxleC1wYWNrOmVuZDtqdXN0aWZ5LWNvbnRlbnQ6ZW5kfTpob3N0KC5jaGVja2JveC1hbGlnbm1lbnQtc3RhcnQpIC5jaGVja2JveC13cmFwcGVyey1tcy1mbGV4LWFsaWduOnN0YXJ0O2FsaWduLWl0ZW1zOnN0YXJ0fTpob3N0KC5jaGVja2JveC1hbGlnbm1lbnQtY2VudGVyKSAuY2hlY2tib3gtd3JhcHBlcnstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfTpob3N0KC5jaGVja2JveC1qdXN0aWZ5LXNwYWNlLWJldHdlZW4pLDpob3N0KC5jaGVja2JveC1qdXN0aWZ5LXN0YXJ0KSw6aG9zdCguY2hlY2tib3gtanVzdGlmeS1lbmQpLDpob3N0KC5jaGVja2JveC1hbGlnbm1lbnQtc3RhcnQpLDpob3N0KC5jaGVja2JveC1hbGlnbm1lbnQtY2VudGVyKXtkaXNwbGF5OmJsb2NrfTpob3N0KC5jaGVja2JveC1jaGVja2VkKSAuY2hlY2tib3gtaWNvbiw6aG9zdCguY2hlY2tib3gtaW5kZXRlcm1pbmF0ZSkgLmNoZWNrYm94LWljb257Ym9yZGVyLWNvbG9yOnZhcigtLWJvcmRlci1jb2xvci1jaGVja2VkKTtiYWNrZ3JvdW5kOnZhcigtLWNoZWNrYm94LWJhY2tncm91bmQtY2hlY2tlZCl9Omhvc3QoLmNoZWNrYm94LWNoZWNrZWQpIC5jaGVja2JveC1pY29uIHBhdGgsOmhvc3QoLmNoZWNrYm94LWluZGV0ZXJtaW5hdGUpIC5jaGVja2JveC1pY29uIHBhdGh7b3BhY2l0eToxfTpob3N0KC5jaGVja2JveC1kaXNhYmxlZCl7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdHstLWJvcmRlci1yYWRpdXM6Y2FsYyh2YXIoLS1zaXplKSAqIC4xMjUpOy0tYm9yZGVyLXdpZHRoOjJweDstLWJvcmRlci1zdHlsZTpzb2xpZDstLWJvcmRlci1jb2xvcjpyZ2IodmFyKC0taW9uLXRleHQtY29sb3ItcmdiLCAwLCAwLCAwKSwgMC42KTstLWNoZWNrbWFyay13aWR0aDozOy0tY2hlY2tib3gtYmFja2dyb3VuZDp2YXIoLS1pb24taXRlbS1iYWNrZ3JvdW5kLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZikpOy0tdHJhbnNpdGlvbjpiYWNrZ3JvdW5kIDE4MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7LS1zaXplOjE4cHh9LmNoZWNrYm94LWljb24gcGF0aHtzdHJva2UtZGFzaGFycmF5OjMwO3N0cm9rZS1kYXNob2Zmc2V0OjMwfTpob3N0KC5jaGVja2JveC1jaGVja2VkKSAuY2hlY2tib3gtaWNvbiBwYXRoLDpob3N0KC5jaGVja2JveC1pbmRldGVybWluYXRlKSAuY2hlY2tib3gtaWNvbiBwYXRoe3N0cm9rZS1kYXNob2Zmc2V0OjA7LXdlYmtpdC10cmFuc2l0aW9uOnN0cm9rZS1kYXNob2Zmc2V0IDkwbXMgbGluZWFyIDkwbXM7dHJhbnNpdGlvbjpzdHJva2UtZGFzaG9mZnNldCA5MG1zIGxpbmVhciA5MG1zfTpob3N0KC5jaGVja2JveC1kaXNhYmxlZCkgLmxhYmVsLXRleHQtd3JhcHBlcntvcGFjaXR5OjAuMzh9Omhvc3QoLmNoZWNrYm94LWRpc2FibGVkKSAubmF0aXZlLXdyYXBwZXJ7b3BhY2l0eTowLjYzfVwiO1xuY29uc3QgSW9uQ2hlY2tib3hNZFN0eWxlMCA9IGNoZWNrYm94TWRDc3M7XG5jb25zdCBDaGVja2JveCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pb25DaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkNoYW5nZVwiLCA3KTtcbiAgICB0aGlzLmlvbkZvY3VzID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25Gb2N1c1wiLCA3KTtcbiAgICB0aGlzLmlvbkJsdXIgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkJsdXJcIiwgNyk7XG4gICAgdGhpcy5pbnB1dElkID0gYGlvbi1jYi0ke2NoZWNrYm94SWRzKyt9YDtcbiAgICB0aGlzLmlucHV0TGFiZWxJZCA9IGAke3RoaXMuaW5wdXRJZH0tbGJsYDtcbiAgICB0aGlzLmhlbHBlclRleHRJZCA9IGAke3RoaXMuaW5wdXRJZH0taGVscGVyLXRleHRgO1xuICAgIHRoaXMuZXJyb3JUZXh0SWQgPSBgJHt0aGlzLmlucHV0SWR9LWVycm9yLXRleHRgO1xuICAgIHRoaXMuaW5oZXJpdGVkQXR0cmlidXRlcyA9IHt9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNoZWNrZWQgcHJvcGVydHkgYW5kIGVtaXRzXG4gICAgICogdGhlIGlvbkNoYW5nZSBldmVudC4gVXNlIHRoaXMgdG8gdXBkYXRlIHRoZVxuICAgICAqIGNoZWNrZWQgc3RhdGUgaW4gcmVzcG9uc2UgdG8gdXNlci1nZW5lcmF0ZWRcbiAgICAgKiBhY3Rpb25zIHN1Y2ggYXMgYSBjbGljay5cbiAgICAgKi9cbiAgICB0aGlzLnNldENoZWNrZWQgPSBzdGF0ZSA9PiB7XG4gICAgICBjb25zdCBpc0NoZWNrZWQgPSB0aGlzLmNoZWNrZWQgPSBzdGF0ZTtcbiAgICAgIHRoaXMuaW9uQ2hhbmdlLmVtaXQoe1xuICAgICAgICBjaGVja2VkOiBpc0NoZWNrZWQsXG4gICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIHRoaXMudG9nZ2xlQ2hlY2tlZCA9IGV2ID0+IHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnNldEZvY3VzKCk7XG4gICAgICB0aGlzLnNldENoZWNrZWQoIXRoaXMuY2hlY2tlZCk7XG4gICAgICB0aGlzLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICB9O1xuICAgIHRoaXMub25Gb2N1cyA9ICgpID0+IHtcbiAgICAgIHRoaXMuaW9uRm9jdXMuZW1pdCgpO1xuICAgIH07XG4gICAgdGhpcy5vbkJsdXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLmlvbkJsdXIuZW1pdCgpO1xuICAgIH07XG4gICAgdGhpcy5vbktleURvd24gPSBldiA9PiB7XG4gICAgICBpZiAoZXYua2V5ID09PSAnICcpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgdGhpcy50b2dnbGVDaGVja2VkKGV2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5vbkNsaWNrID0gZXYgPT4ge1xuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy50b2dnbGVDaGVja2VkKGV2KTtcbiAgICB9O1xuICAgIHRoaXMuY29sb3IgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5uYW1lID0gdGhpcy5pbnB1dElkO1xuICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xuICAgIHRoaXMuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmVycm9yVGV4dCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlbHBlclRleHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52YWx1ZSA9ICdvbic7XG4gICAgdGhpcy5sYWJlbFBsYWNlbWVudCA9ICdzdGFydCc7XG4gICAgdGhpcy5qdXN0aWZ5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYWxpZ25tZW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmVxdWlyZWQgPSBmYWxzZTtcbiAgfVxuICBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICB0aGlzLmluaGVyaXRlZEF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbmhlcml0QXJpYUF0dHJpYnV0ZXModGhpcy5lbCkpO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXN5bmMgc2V0Rm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuZm9jdXNFbCkge1xuICAgICAgdGhpcy5mb2N1c0VsLmZvY3VzKCk7XG4gICAgfVxuICB9XG4gIGdldEhpbnRUZXh0SUQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgZWwsXG4gICAgICBoZWxwZXJUZXh0LFxuICAgICAgZXJyb3JUZXh0LFxuICAgICAgaGVscGVyVGV4dElkLFxuICAgICAgZXJyb3JUZXh0SWRcbiAgICB9ID0gdGhpcztcbiAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdpb24tdG91Y2hlZCcpICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygnaW9uLWludmFsaWQnKSAmJiBlcnJvclRleHQpIHtcbiAgICAgIHJldHVybiBlcnJvclRleHRJZDtcbiAgICB9XG4gICAgaWYgKGhlbHBlclRleHQpIHtcbiAgICAgIHJldHVybiBoZWxwZXJUZXh0SWQ7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgLyoqXG4gICAqIFJlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgaGVscGVyIHRleHQgYW5kIGVycm9yIHRleHQuXG4gICAqIFRoaXMgZWxlbWVudCBzaG91bGQgb25seSBiZSByZW5kZXJlZCBpZiBoaW50IHRleHQgaXMgc2V0LlxuICAgKi9cbiAgcmVuZGVySGludFRleHQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaGVscGVyVGV4dCxcbiAgICAgIGVycm9yVGV4dCxcbiAgICAgIGhlbHBlclRleHRJZCxcbiAgICAgIGVycm9yVGV4dElkXG4gICAgfSA9IHRoaXM7XG4gICAgLyoqXG4gICAgICogdW5kZWZpbmVkIGFuZCBlbXB0eSBzdHJpbmcgdmFsdWVzIHNob3VsZFxuICAgICAqIGJlIHRyZWF0ZWQgYXMgbm90IGhhdmluZyBoZWxwZXIvZXJyb3IgdGV4dC5cbiAgICAgKi9cbiAgICBjb25zdCBoYXNIaW50VGV4dCA9ICEhaGVscGVyVGV4dCB8fCAhIWVycm9yVGV4dDtcbiAgICBpZiAoIWhhc0hpbnRUZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBoKFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzOiBcImNoZWNrYm94LWJvdHRvbVwiXG4gICAgfSwgaChcImRpdlwiLCB7XG4gICAgICBpZDogaGVscGVyVGV4dElkLFxuICAgICAgY2xhc3M6IFwiaGVscGVyLXRleHRcIixcbiAgICAgIHBhcnQ6IFwic3VwcG9ydGluZy10ZXh0IGhlbHBlci10ZXh0XCJcbiAgICB9LCBoZWxwZXJUZXh0KSwgaChcImRpdlwiLCB7XG4gICAgICBpZDogZXJyb3JUZXh0SWQsXG4gICAgICBjbGFzczogXCJlcnJvci10ZXh0XCIsXG4gICAgICBwYXJ0OiBcInN1cHBvcnRpbmctdGV4dCBlcnJvci10ZXh0XCJcbiAgICB9LCBlcnJvclRleHQpKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29sb3IsXG4gICAgICBjaGVja2VkLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBlbCxcbiAgICAgIGdldFNWR1BhdGgsXG4gICAgICBpbmRldGVybWluYXRlLFxuICAgICAgaW5oZXJpdGVkQXR0cmlidXRlcyxcbiAgICAgIGlucHV0SWQsXG4gICAgICBqdXN0aWZ5LFxuICAgICAgbGFiZWxQbGFjZW1lbnQsXG4gICAgICBuYW1lLFxuICAgICAgdmFsdWUsXG4gICAgICBhbGlnbm1lbnQsXG4gICAgICByZXF1aXJlZFxuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGNvbnN0IHBhdGggPSBnZXRTVkdQYXRoKG1vZGUsIGluZGV0ZXJtaW5hdGUpO1xuICAgIGNvbnN0IGhhc0xhYmVsQ29udGVudCA9IGVsLnRleHRDb250ZW50ICE9PSAnJztcbiAgICByZW5kZXJIaWRkZW5JbnB1dCh0cnVlLCBlbCwgbmFtZSwgY2hlY2tlZCA/IHZhbHVlIDogJycsIGRpc2FibGVkKTtcbiAgICAvLyBUaGUgaG9zdCBlbGVtZW50IG11c3QgaGF2ZSBhIGNoZWNrYm94IHJvbGUgdG8gZW5zdXJlIHByb3BlciBWb2ljZU92ZXJcbiAgICAvLyBzdXBwb3J0IGluIFNhZmFyaSBmb3IgYWNjZXNzaWJpbGl0eS5cbiAgICByZXR1cm4gaChIb3N0LCB7XG4gICAgICBrZXk6ICc5MGJiMTdhNGZhZTE3MDg4NTI0NTU1OTY4YTAwMjMyNzQwMDgwN2NmJyxcbiAgICAgIHJvbGU6IFwiY2hlY2tib3hcIixcbiAgICAgIFwiYXJpYS1jaGVja2VkXCI6IGluZGV0ZXJtaW5hdGUgPyAnbWl4ZWQnIDogYCR7Y2hlY2tlZH1gLFxuICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IHRoaXMuZ2V0SGludFRleHRJRCgpLFxuICAgICAgXCJhcmlhLWludmFsaWRcIjogdGhpcy5nZXRIaW50VGV4dElEKCkgPT09IHRoaXMuZXJyb3JUZXh0SWQsXG4gICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBoYXNMYWJlbENvbnRlbnQgPyB0aGlzLmlucHV0TGFiZWxJZCA6IG51bGwsXG4gICAgICBcImFyaWEtbGFiZWxcIjogaW5oZXJpdGVkQXR0cmlidXRlc1snYXJpYS1sYWJlbCddIHx8IG51bGwsXG4gICAgICBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZWQgPyAndHJ1ZScgOiBudWxsLFxuICAgICAgdGFiaW5kZXg6IGRpc2FibGVkID8gdW5kZWZpbmVkIDogMCxcbiAgICAgIG9uS2V5RG93bjogdGhpcy5vbktleURvd24sXG4gICAgICBjbGFzczogY3JlYXRlQ29sb3JDbGFzc2VzKGNvbG9yLCB7XG4gICAgICAgIFttb2RlXTogdHJ1ZSxcbiAgICAgICAgJ2luLWl0ZW0nOiBob3N0Q29udGV4dCgnaW9uLWl0ZW0nLCBlbCksXG4gICAgICAgICdjaGVja2JveC1jaGVja2VkJzogY2hlY2tlZCxcbiAgICAgICAgJ2NoZWNrYm94LWRpc2FibGVkJzogZGlzYWJsZWQsXG4gICAgICAgICdjaGVja2JveC1pbmRldGVybWluYXRlJzogaW5kZXRlcm1pbmF0ZSxcbiAgICAgICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgICAgIFtgY2hlY2tib3gtanVzdGlmeS0ke2p1c3RpZnl9YF06IGp1c3RpZnkgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgW2BjaGVja2JveC1hbGlnbm1lbnQtJHthbGlnbm1lbnR9YF06IGFsaWdubWVudCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICBbYGNoZWNrYm94LWxhYmVsLXBsYWNlbWVudC0ke2xhYmVsUGxhY2VtZW50fWBdOiB0cnVlXG4gICAgICB9KSxcbiAgICAgIG9uQ2xpY2s6IHRoaXMub25DbGlja1xuICAgIH0sIGgoXCJsYWJlbFwiLCB7XG4gICAgICBrZXk6ICc1OGI1NzYyYWEzNThkZmY4MTkxMDg3NDYzMWUwNjYyMGEyYWUxNTYxJyxcbiAgICAgIGNsYXNzOiBcImNoZWNrYm94LXdyYXBwZXJcIixcbiAgICAgIGh0bWxGb3I6IGlucHV0SWRcbiAgICB9LCBoKFwiaW5wdXRcIiwgT2JqZWN0LmFzc2lnbih7XG4gICAgICBrZXk6ICc2YWJlMjk5ZDY5MGMzNDVkMzZkNmZkNzZhYjExM2ZkY2NmYmJhYzUyJyxcbiAgICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICAgIGNoZWNrZWQ6IGNoZWNrZWQgPyB0cnVlIDogdW5kZWZpbmVkLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgaWQ6IGlucHV0SWQsXG4gICAgICBvbkNoYW5nZTogdGhpcy50b2dnbGVDaGVja2VkLFxuICAgICAgb25Gb2N1czogKCkgPT4gdGhpcy5vbkZvY3VzKCksXG4gICAgICBvbkJsdXI6ICgpID0+IHRoaXMub25CbHVyKCksXG4gICAgICByZWY6IGZvY3VzRWwgPT4gdGhpcy5mb2N1c0VsID0gZm9jdXNFbCxcbiAgICAgIHJlcXVpcmVkOiByZXF1aXJlZFxuICAgIH0sIGluaGVyaXRlZEF0dHJpYnV0ZXMpKSwgaChcImRpdlwiLCB7XG4gICAgICBrZXk6ICcyNjU0MTY4ZTQ1Y2NmZGJjZmUxM2FmOGM5N2UwZTIxZDYxYmEwMTUwJyxcbiAgICAgIGNsYXNzOiB7XG4gICAgICAgICdsYWJlbC10ZXh0LXdyYXBwZXInOiB0cnVlLFxuICAgICAgICAnbGFiZWwtdGV4dC13cmFwcGVyLWhpZGRlbic6ICFoYXNMYWJlbENvbnRlbnRcbiAgICAgIH0sXG4gICAgICBwYXJ0OiBcImxhYmVsXCIsXG4gICAgICBpZDogdGhpcy5pbnB1dExhYmVsSWRcbiAgICB9LCBoKFwic2xvdFwiLCB7XG4gICAgICBrZXk6ICdhOTFmM2Y2N2Q5ZGRkNmI2MTZlNDg3OTlhYmExMWNhZTM1NjRkMWFiJ1xuICAgIH0pLCB0aGlzLnJlbmRlckhpbnRUZXh0KCkpLCBoKFwiZGl2XCIsIHtcbiAgICAgIGtleTogJ2Q1YTkxNzBiMDg0ZDA5ZGY2YjAyZjQxNmU3NDQwODViNWJjZjBkZGUnLFxuICAgICAgY2xhc3M6IFwibmF0aXZlLXdyYXBwZXJcIlxuICAgIH0sIGgoXCJzdmdcIiwge1xuICAgICAga2V5OiAnYjE5NjhjZTRhYTlkNjUyYTlmMmJkYzQyN2VhM2E2NWU2YzA0ZGY1MScsXG4gICAgICBjbGFzczogXCJjaGVja2JveC1pY29uXCIsXG4gICAgICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLFxuICAgICAgcGFydDogXCJjb250YWluZXJcIlxuICAgIH0sIHBhdGgpKSkpO1xuICB9XG4gIGdldFNWR1BhdGgobW9kZSwgaW5kZXRlcm1pbmF0ZSkge1xuICAgIGxldCBwYXRoID0gaW5kZXRlcm1pbmF0ZSA/IGgoXCJwYXRoXCIsIHtcbiAgICAgIGQ6IFwiTTYgMTJMMTggMTJcIixcbiAgICAgIHBhcnQ6IFwibWFya1wiXG4gICAgfSkgOiBoKFwicGF0aFwiLCB7XG4gICAgICBkOiBcIk01LjksMTIuNWwzLjgsMy44bDguOC04LjhcIixcbiAgICAgIHBhcnQ6IFwibWFya1wiXG4gICAgfSk7XG4gICAgaWYgKG1vZGUgPT09ICdtZCcpIHtcbiAgICAgIHBhdGggPSBpbmRldGVybWluYXRlID8gaChcInBhdGhcIiwge1xuICAgICAgICBkOiBcIk0yIDEySDIyXCIsXG4gICAgICAgIHBhcnQ6IFwibWFya1wiXG4gICAgICB9KSA6IGgoXCJwYXRoXCIsIHtcbiAgICAgICAgZDogXCJNMS43MywxMi45MSA4LjEsMTkuMjggMjIuNzksNC41OVwiLFxuICAgICAgICBwYXJ0OiBcIm1hcmtcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIGdldCBlbCgpIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTtcbiAgfVxufTtcbmxldCBjaGVja2JveElkcyA9IDA7XG5DaGVja2JveC5zdHlsZSA9IHtcbiAgaW9zOiBJb25DaGVja2JveElvc1N0eWxlMCxcbiAgbWQ6IElvbkNoZWNrYm94TWRTdHlsZTBcbn07XG5leHBvcnQgeyBDaGVja2JveCBhcyBpb25fY2hlY2tib3ggfTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT0EsSUFBTSxpQkFBaUI7QUFDdkIsSUFBTSx1QkFBdUI7QUFDN0IsSUFBTSxnQkFBZ0I7QUFDdEIsSUFBTSxzQkFBc0I7QUFDNUIsSUFBTSxXQUFXLE1BQU07QUFBQSxFQUNyQixZQUFZLFNBQVM7QUFDbkIscUJBQWlCLE1BQU0sT0FBTztBQUM5QixTQUFLLFlBQVksWUFBWSxNQUFNLGFBQWEsQ0FBQztBQUNqRCxTQUFLLFdBQVcsWUFBWSxNQUFNLFlBQVksQ0FBQztBQUMvQyxTQUFLLFVBQVUsWUFBWSxNQUFNLFdBQVcsQ0FBQztBQUM3QyxTQUFLLFVBQVUsVUFBVSxhQUFhO0FBQ3RDLFNBQUssZUFBZSxHQUFHLEtBQUssT0FBTztBQUNuQyxTQUFLLGVBQWUsR0FBRyxLQUFLLE9BQU87QUFDbkMsU0FBSyxjQUFjLEdBQUcsS0FBSyxPQUFPO0FBQ2xDLFNB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QSxNQUMxQjtBQUFBLE1BQ0EsSUFBSTtBQUFBLE1BQ0osVUFBVSxLQUFLO0FBQUEsTUFDZixTQUFTLE1BQU0sS0FBSyxRQUFRO0FBQUEsTUFDNUIsUUFBUSxNQUFNLEtBQUssT0FBTztBQUFBLE1BQzFCLEtBQUssYUFBVyxLQUFLLFVBQVU7QUFBQSxNQUMvQjtBQUFBLElBQ0YsR0FBRyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsT0FBTztBQUFBLE1BQ2pDLEtBQUs7QUFBQSxNQUNMLE9BQU87QUFBQSxRQUNMLHNCQUFzQjtBQUFBLFFBQ3RCLDZCQUE2QixDQUFDO0FBQUEsTUFDaEM7QUFBQSxNQUNBLE1BQU07QUFBQSxNQUNOLElBQUksS0FBSztBQUFBLElBQ1gsR0FBRyxFQUFFLFFBQVE7QUFBQSxNQUNYLEtBQUs7QUFBQSxJQUNQLENBQUMsR0FBRyxLQUFLLGVBQWUsQ0FBQyxHQUFHLEVBQUUsT0FBTztBQUFBLE1BQ25DLEtBQUs7QUFBQSxNQUNMLE9BQU87QUFBQSxJQUNULEdBQUcsRUFBRSxPQUFPO0FBQUEsTUFDVixLQUFLO0FBQUEsTUFDTCxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUEsTUFDVCxNQUFNO0FBQUEsSUFDUixHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFBQSxFQUNaO0FBQUEsRUFDQSxXQUFXLE1BQU0sZUFBZTtBQUM5QixRQUFJLE9BQU8sZ0JBQWdCLEVBQUUsUUFBUTtBQUFBLE1BQ25DLEdBQUc7QUFBQSxNQUNILE1BQU07QUFBQSxJQUNSLENBQUMsSUFBSSxFQUFFLFFBQVE7QUFBQSxNQUNiLEdBQUc7QUFBQSxNQUNILE1BQU07QUFBQSxJQUNSLENBQUM7QUFDRCxRQUFJLFNBQVMsTUFBTTtBQUNqQixhQUFPLGdCQUFnQixFQUFFLFFBQVE7QUFBQSxRQUMvQixHQUFHO0FBQUEsUUFDSCxNQUFNO0FBQUEsTUFDUixDQUFDLElBQUksRUFBRSxRQUFRO0FBQUEsUUFDYixHQUFHO0FBQUEsUUFDSCxNQUFNO0FBQUEsTUFDUixDQUFDO0FBQUEsSUFDSDtBQUNBLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFDQSxJQUFJLEtBQUs7QUFDUCxXQUFPLFdBQVcsSUFBSTtBQUFBLEVBQ3hCO0FBQ0Y7QUFDQSxJQUFJLGNBQWM7QUFDbEIsU0FBUyxRQUFRO0FBQUEsRUFDZixLQUFLO0FBQUEsRUFDTCxJQUFJO0FBQ047IiwibmFtZXMiOltdLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMF19
